/* tslint:disable */
/* eslint-disable */
/**
 * AivisSpeech Engine
 * AivisSpeech の音声合成エンジンです。
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * プリセット情報
 * @export
 * @interface Preset
 */
export interface Preset {
    /**
     * 
     * @type {number}
     * @memberof Preset
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Preset
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Preset
     */
    speakerUuid: string;
    /**
     * 
     * @type {number}
     * @memberof Preset
     */
    styleId: number;
    /**
     * 指定された話者のスタイルをどの程度全体に反映するかを指定する。
     * 例えばスタイルが Happy ならば、この値を大きくするほど全体の話し方が明るくなる。
     * 一方値を大きくしすぎると発声がおかしくなりがちなので、適宜調整が必要。
     * VOICEVOX ENGINE との互換性のため、未指定時はデフォルト値が適用される。
     * @type {number}
     * @memberof Preset
     */
    styleStrengthScale?: number;
    /**
     * 
     * @type {number}
     * @memberof Preset
     */
    intonationScale: number;
    /**
     * 
     * @type {number}
     * @memberof Preset
     */
    speedScale: number;
    /**
     * 
     * @type {number}
     * @memberof Preset
     */
    pitchScale: number;
    /**
     * 
     * @type {number}
     * @memberof Preset
     */
    volumeScale: number;
    /**
     * 
     * @type {number}
     * @memberof Preset
     */
    prePhonemeLength: number;
    /**
     * 
     * @type {number}
     * @memberof Preset
     */
    postPhonemeLength: number;
}

/**
 * Check if a given object implements the Preset interface.
 */
export function instanceOfPreset(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "speakerUuid" in value;
    isInstance = isInstance && "styleId" in value;
    isInstance = isInstance && "intonationScale" in value;
    isInstance = isInstance && "speedScale" in value;
    isInstance = isInstance && "pitchScale" in value;
    isInstance = isInstance && "volumeScale" in value;
    isInstance = isInstance && "prePhonemeLength" in value;
    isInstance = isInstance && "postPhonemeLength" in value;

    return isInstance;
}

export function PresetFromJSON(json: any): Preset {
    return PresetFromJSONTyped(json, false);
}

export function PresetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Preset {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'speakerUuid': json['speaker_uuid'],
        'styleId': json['style_id'],
        'styleStrengthScale': !exists(json, 'styleStrengthScale') ? undefined : json['styleStrengthScale'],
        'intonationScale': json['intonationScale'],
        'speedScale': json['speedScale'],
        'pitchScale': json['pitchScale'],
        'volumeScale': json['volumeScale'],
        'prePhonemeLength': json['prePhonemeLength'],
        'postPhonemeLength': json['postPhonemeLength'],
    };
}

export function PresetToJSON(value?: Preset | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'speaker_uuid': value.speakerUuid,
        'style_id': value.styleId,
        'styleStrengthScale': value.styleStrengthScale,
        'intonationScale': value.intonationScale,
        'speedScale': value.speedScale,
        'pitchScale': value.pitchScale,
        'volumeScale': value.volumeScale,
        'prePhonemeLength': value.prePhonemeLength,
        'postPhonemeLength': value.postPhonemeLength,
    };
}

