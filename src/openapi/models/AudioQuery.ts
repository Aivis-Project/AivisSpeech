/* tslint:disable */
/* eslint-disable */
/**
 * AivisSpeech Engine
 * AivisSpeech の音声合成エンジンです。
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccentPhrase } from './AccentPhrase';
import {
    AccentPhraseFromJSON,
    AccentPhraseFromJSONTyped,
    AccentPhraseToJSON,
} from './AccentPhrase';

/**
 * 音声合成用のクエリ
 * @export
 * @interface AudioQuery
 */
export interface AudioQuery {
    /**
     * 
     * @type {Array<AccentPhrase>}
     * @memberof AudioQuery
     */
    accentPhrases: Array<AccentPhrase>;
    /**
     * 全体の話速を 0.5 ~ 2.0 の範囲で指定する (デフォルト: 1.0) 。
     * 2.0 で 2 倍速、0.5 で 0.5 倍速になる。
     * @type {number}
     * @memberof AudioQuery
     */
    speedScale: number;
    /**
     * 話者スタイルの声色の強弱を 0.0 ~ 2.0 の範囲で指定する (デフォルト: 1.0) 。
     * 値が大きいほどそのスタイルに近い抑揚がついた声になる。
     * 例えば話者スタイルが「うれしい」なら、値が大きいほどより嬉しそうな明るい話し方になる。
     * 一方スタイルによっては値を大きくしすぎると不自然な棒読みボイスになりがちなので、適宜調整が必要。
     * 全スタイルの平均であるノーマルスタイルには指定できない (値にかかわらず無視される) 。
     * @type {number}
     * @memberof AudioQuery
     */
    intonationScale: number;
    /**
     * 話す速さの緩急の強弱を 0.0 ~ 2.0 の範囲で指定する (デフォルト: 1.0) 。
     * 値が大きいほどより早口で生っぽい抑揚がついた声になる。
     * VOICEVOX ENGINE との互換性のため、未指定時はデフォルト値が適用される。
     * @type {number}
     * @memberof AudioQuery
     */
    tempoDynamicsScale?: number;
    /**
     * 全体の音高を -0.15 ~ 0.15 の範囲で指定する (デフォルト: 0.0) 。
     * 値が大きいほど高い声になる。
     * VOICEVOX ENGINE と異なり、この値を 0.0 から変更すると音質が劣化するため注意が必要。
     * @type {number}
     * @memberof AudioQuery
     */
    pitchScale: number;
    /**
     * 全体の音量を 0.0 ~ 2.0 の範囲で指定する (デフォルト: 1.0) 。
     * 値が大きいほど大きな声になる。
     * @type {number}
     * @memberof AudioQuery
     */
    volumeScale: number;
    /**
     * 
     * @type {number}
     * @memberof AudioQuery
     */
    prePhonemeLength: number;
    /**
     * 
     * @type {number}
     * @memberof AudioQuery
     */
    postPhonemeLength: number;
    /**
     * 
     * @type {number}
     * @memberof AudioQuery
     */
    outputSamplingRate: number;
    /**
     * 
     * @type {boolean}
     * @memberof AudioQuery
     */
    outputStereo: boolean;
    /**
     * 
     * @type {string}
     * @memberof AudioQuery
     */
    kana?: string | null;
}

/**
 * Check if a given object implements the AudioQuery interface.
 */
export function instanceOfAudioQuery(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accentPhrases" in value;
    isInstance = isInstance && "speedScale" in value;
    isInstance = isInstance && "intonationScale" in value;
    isInstance = isInstance && "pitchScale" in value;
    isInstance = isInstance && "volumeScale" in value;
    isInstance = isInstance && "prePhonemeLength" in value;
    isInstance = isInstance && "postPhonemeLength" in value;
    isInstance = isInstance && "outputSamplingRate" in value;
    isInstance = isInstance && "outputStereo" in value;

    return isInstance;
}

export function AudioQueryFromJSON(json: any): AudioQuery {
    return AudioQueryFromJSONTyped(json, false);
}

export function AudioQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): AudioQuery {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accentPhrases': ((json['accent_phrases'] as Array<any>).map(AccentPhraseFromJSON)),
        'speedScale': json['speedScale'],
        'intonationScale': json['intonationScale'],
        'tempoDynamicsScale': !exists(json, 'tempoDynamicsScale') ? undefined : json['tempoDynamicsScale'],
        'pitchScale': json['pitchScale'],
        'volumeScale': json['volumeScale'],
        'prePhonemeLength': json['prePhonemeLength'],
        'postPhonemeLength': json['postPhonemeLength'],
        'outputSamplingRate': json['outputSamplingRate'],
        'outputStereo': json['outputStereo'],
        'kana': !exists(json, 'kana') ? undefined : json['kana'],
    };
}

export function AudioQueryToJSON(value?: AudioQuery | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accent_phrases': ((value.accentPhrases as Array<any>).map(AccentPhraseToJSON)),
        'speedScale': value.speedScale,
        'intonationScale': value.intonationScale,
        'tempoDynamicsScale': value.tempoDynamicsScale,
        'pitchScale': value.pitchScale,
        'volumeScale': value.volumeScale,
        'prePhonemeLength': value.prePhonemeLength,
        'postPhonemeLength': value.postPhonemeLength,
        'outputSamplingRate': value.outputSamplingRate,
        'outputStereo': value.outputStereo,
        'kana': value.kana,
    };
}

